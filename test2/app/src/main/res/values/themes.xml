<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Theme.Test2" parent="Theme.Material3.Light.NoActionBar">
        <!-- Primary brand color. -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <!-- Secondary brand color. -->
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <!-- Status bar color. -->
        <item name="android:statusBarColor">@color/black</item>
        <!-- Customize your theme here. -->
    </style>


    <style name="Theme.MyApp" parent="Theme.MaterialComponents.Light">
        ...
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.MyApp.SmallComponent</item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.MyApp.MediumComponent</item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.MyApp.LargeComponent</item>

        <item name="materialCardViewStyle">@style/Widget.MyApp.MaterialCardView</item>

        <!--this item is invoked in app theme to override the contained material button-->
        <item name="materialButtonStyle">@style/myCustomContainedButton</item>

        <!--this item is invoked in app theme to override the outlined material button-->
        <item name="materialButtonOutlinedStyle">@style/myCustomOutlinedButton</item>

        <!--this changes the filled colour of the MDC Filled EditText-->
        <!--this also changes the color of the hint font and helper text too-->
        <item name="colorOnSurface">@color/Gray_DarkGray1</item>

        <!--this customizes the hint font of the EditText-->
        <item name="textAppearanceSubtitle1">@style/TextAppearance.App.Subtitle1</item>

        <!--this changes the helper text font-->
        <item name="textAppearanceCaption">@style/TextAppearance.App.Caption</item>

        ...
    </style>


    <style name="ShapeAppearance.MyApp.SmallComponent" parent="ShapeAppearance.MaterialComponents.SmallComponent">
        <item name="cornerFamily">cut</item>
        <item name="cornerSize">4dp</item>
    </style>
    <style name="ShapeAppearance.MyApp.MediumComponent" parent="ShapeAppearance.MaterialComponents.MediumComponent">
        <item name="cornerFamily">cut</item>
        <item name="cornerSize">8dp</item>
    </style>
    <style name="ShapeAppearance.MyApp.LargeComponent" parent="ShapeAppearance.MaterialComponents.LargeComponent">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">4dp</item>
    </style>



    <style name="Widget.MyApp.MaterialCardView" parent="">
        <item name="shapeAppearanceOverlay">@style/ShapeAppearanceOverlay.MyApp.MaterialCardView</item>
    </style>
    <style name="ShapeAppearanceOverlay.MyApp.MaterialCardView" parent="">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">16dp</item>
    </style>
    <style name="ShapeAppearanceOverlay.MyApp.MaterialCardView.Cut" parent="">
        <item name="cornerFamily">cut</item>
    </style>


    <style name="TextAppearance.App.Subtitle1" parent="TextAppearance.MaterialComponents.Subtitle1">
        <!--this changes the font face of the hint text-->
        <item name="fontFamily">sans-serif-condensed</item>
        <item name="android:fontFamily">sans-serif-condensed</item>
    </style>

    <style name="TextAppearance.App.Caption" parent="TextAppearance.MaterialComponents.Caption">
        <!--this changes the font face of the helper text-->
        <item name="fontFamily">sans-serif-black</item>
        <item name="android:fontFamily">sans-serif-black</item>
    </style>


    <!--theming of contained button begins here-->
    <!--parent name is to be give carefully-->
    <style name="myCustomContainedButton" parent="Widget.MaterialComponents.Button">
        <!--these all styles are implemented outside, because to get all the overridden attributes easily-->
        <item name="shapeAppearance">@style/customContainedButtonTheme</item>
        <item name="android:textAppearance">@style/myCustomTextForMaterialButtons</item>
    </style>
    <!--overriding cornerSize and cornerFamily of the contained button-->
    <style name="customContainedButtonTheme">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">24dp</item>
    </style>
    <!--theming of contained button ends here-->

    <!--theming of outlined button begins here-->
    <!--parent name is to be give carefully-->
    <style name="myCustomOutlinedButton" parent="Widget.MaterialComponents.Button.OutlinedButton">
        <!--these all styles are implemented outside, because to get all the overridden attributes easily-->
        <item name="shapeAppearance">@style/customOutlinedButtonTheme</item>
        <item name="android:textAppearance">@style/myCustomTextForMaterialButtons</item>
    </style>
    <!--overriding cornerSize and cornerFamily of the outlined button-->
    <style name="customOutlinedButtonTheme">
        <item name="cornerFamily">cut</item>
        <item name="cornerSize">8dp</item>
    </style>
    <!--theming of outlined button ends here-->

    <!--Font family and size of all the buttons in the entire application should be same-->
    <!--so this child is common for all the material buttons in entire application-->
    <style name="myCustomTextForMaterialButtons">
        <item name="fontFamily">sans-serif-condensed-medium</item>
        <item name="android:textSize">18sp</item>
        <item name="android:fontFamily">sans-serif</item>
    </style>
</resources>